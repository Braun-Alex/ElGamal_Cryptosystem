package keypair

import (
	"crypto/rand"
	"math/big"
)

func GenerateKeypair() (privateKey, publicKey, p, g *big.Int) {
	p, g, buffer := new(big.Int), new(big.Int), new(big.Int)
	// NIST recommended parameters
	p.SetString("134078079299425970995740249982058461274793658205923933777235614437217640300735"+
		"469768018742981669034276900318581864860508537538828119465699464336490060841716758140271"+
		"58704044497329916531892279734681079228701507960399456397328834724937423198487416781"+
		"0402860466432319647416996573756400486158193113094156600044403", 10)
	g.SetString("264632026835179455416159738889348641036454874300710270205153014059162147887695"+
		"6230309803650370745305978764166051794688864578736491533298167046794698938327301875425641"+
		"74130515541786032247634840839195052813828690486223153700246506836776821413513532926195"+
		"79765691589036183835966316981470193736707669740196824748", 10)
	privateKey, err := rand.Int(rand.Reader, buffer.Sub(p, big.NewInt(1)))
	if err != nil {
		panic("Private key could not be generated")
	}
	// Public key = g^a (mod p)
	publicKey = buffer.Exp(g, privateKey, p)
	return
}
