package keypair

import (
	"crypto/rand"
	"math/big"
	"strings"
)

// RFC 3526: https://datatracker.ietf.org/doc/html/rfc3526 (4096-bit MODP Group)
var P, _ = new(big.Int).SetString(strings.ToLower("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1"+
	"29024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"+
	"E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D"+
	"C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D"+
	"670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"+
	"DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64"+
	"ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B"+
	"F12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"+
	"43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA"+
	"2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED"+
	"1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199"+
	"FFFFFFFFFFFFFFFF"), 16)
var G = big.NewInt(2)

func GenerateKeypair() (*big.Int, *big.Int) {
	privateKey, publicKey, buffer := new(big.Int), new(big.Int), new(big.Int)
	// Generating of private key from [0; p-1)
	privateKey, err := rand.Int(rand.Reader, buffer.Sub(P, big.NewInt(1)))
	// Checking for error and that private key must be not 0 or 1
	if err != nil || privateKey.Cmp(big.NewInt(1)) <= 0 {
		panic("Private key could not be generated")
	}
	// Public key = g^a (mod p)
	publicKey.Exp(G, privateKey, P)
	return privateKey, publicKey
}
